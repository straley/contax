{"version":3,"sources":["features/contax/contactsSlice.ts","features/contax/ContaxList.tsx","features/contax/Header.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["fetchContacts","createAsyncThunk","_","a","signal","source","axios","CancelToken","addEventListener","cancel","get","cancelToken","token","response","data","selectContacts","state","contacts","createAction","console","log","contactsSlice","createSlice","name","initialState","loading","error","reducers","create","action","push","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","useStyles","makeStyles","theme","root","flexGrow","ContaxList","classes","useSelector","length","List","className","subheader","map","contact","ListItem","ListItemText","primary","first_name","last_name","id","menuButton","marginRight","spacing","title","Header","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu","Typography","variant","Button","AddCircle","App","dispatch","useDispatch","useEffect","store","configureStore","reducer","contactsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4SA0BaA,EAAgBC,YAC3B,iBAD2C,uCAE3C,WAAOC,EAAP,sBAAAC,EAAA,6DAAYC,EAAZ,EAAYA,OACJC,EAASC,IAAMC,YAAYF,SACjCD,EAAOI,iBAAiB,SAAS,WAC/BH,EAAOI,YAHX,SAKyBH,IAAMI,IAAN,kDAA6D,CAClFC,YAAaN,EAAOO,QANxB,cAKQC,EALR,yBAQSA,EAASC,MARlB,2CAF2C,yDAchCC,EAAiB,SAACC,GAC7B,OAAOA,EAAMC,SAASA,UAGlBA,EAAWC,YAAuC,SACxDC,QAAQC,IAAI,WAAYH,GAEjB,IAAMI,EAAgBC,YAAY,CACvCC,KAAM,WACNC,aA9BgC,CAChCD,KAAM,WACNN,SAAU,GACVQ,QAAS,OACTC,MAAO,MA2BPC,SAAU,CACRC,OAAQ,SAACZ,EAAOa,GACdb,EAAMC,SAASa,KAAKD,EAAOE,WAG/BC,cAAe,SAAAC,GACbA,EAAQC,QAAQlC,EAAcmC,SAAS,SAACnB,EAAOa,GAC7Cb,EAAMC,SAAW,MAEnBgB,EAAQC,QAAQlC,EAAcoC,WAAW,SAACpB,EAAOa,GAC/Cb,EAAMC,SAAWY,EAAOE,WAE1BE,EAAQC,QAAQlC,EAAcqC,UAAU,SAACrB,EAAOa,GAC9Cb,EAAMC,SAAW,SAQRI,GAFWA,EAAciB,QAAzBV,OAEAP,EAAf,SCrDMkB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,OAqBCC,MAjBf,WACE,IAAMC,EAAUN,IAEVtB,EAAW6B,YAAY/B,GAG7B,OAFAI,QAAQC,IAAIH,GAELA,GAAYA,EAAS8B,OAC1B,cAACC,EAAA,EAAD,CAAMC,UAAWJ,EAAQH,KAAMQ,UAAW,uBAA1C,SACGjC,EAASkC,KAAI,SAACC,GAAD,OACZ,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAcC,QAAO,UAAKH,EAAQI,WAAb,YAA2BJ,EAAQK,cAD1D,kBAA0BL,EAAQM,UAKpC,M,8DChCAnB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCkB,WAAY,CACVC,YAAanB,EAAMoB,QAAQ,IAE7BC,MAAO,CACLnB,SAAU,OAsBCoB,MAlBf,WACE,IAAMlB,EAAUN,IAEhB,OACE,cAACyB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQnB,UAAWJ,EAAQc,WAAYU,MAAM,UAAUC,aAAW,OAAnF,SACE,cAACC,EAAA,EAAD,MAEF,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKxB,UAAWJ,EAAQiB,MAA5C,oBAGA,cAACY,EAAA,EAAD,CAAQL,MAAM,UAAd,SAAwB,cAACM,EAAA,EAAD,YCDfC,MAff,WACE,IAAMC,EAAWC,cAMjB,OALAC,qBAAU,WACRF,EAAS7E,QAKT,sBAAKiD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QClBO+B,EAAQC,YAAe,CAClCC,QAAS,CACPjE,SAAUkE,KCOMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1E,GACLP,QAAQO,MAAMA,EAAM2E,c","file":"static/js/main.9170594a.chunk.js","sourcesContent":["import {  createAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\ninterface ContaxContact {\r\n  id?: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  phone_number: string;\r\n}\r\n\r\ninterface ContaxState {\r\n  name: string,\r\n  contacts: ContaxContact[]\r\n  loading: 'idle' | 'pending' | 'succeeded' | 'failed',\r\n  currentRequestId?: number,\r\n  error: string|null\r\n}\r\n\r\nconst initialState: ContaxState = {\r\n  name: 'contacts',\r\n  contacts: [],\r\n  loading: 'idle',\r\n  error: null\r\n};\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetch',\r\n  async (_, { signal }) => {\r\n    const source = axios.CancelToken.source()\r\n    signal.addEventListener('abort', () => {\r\n      source.cancel()\r\n    })\r\n    const response = await axios.get(`http://127.0.0.1:8000/api/contacts/?format=json`, {\r\n      cancelToken: source.token,\r\n    })\r\n    return response.data as ContaxContact[]\r\n  }\r\n)\r\n\r\nexport const selectContacts = (state: {contacts: ContaxState}) => {\r\n  return state.contacts.contacts\r\n}\r\n\r\nconst contacts = createAction<ContaxContact[], 'fetch'>('fetch')\r\nconsole.log(\"CONTACTS\", contacts)\r\n\r\nexport const contactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState,\r\n  reducers: {\r\n    create: (state, action: PayloadAction<ContaxContact>) => {\r\n      state.contacts.push(action.payload)\r\n    },\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(fetchContacts.pending, (state, action) => {\r\n      state.contacts = []\r\n    })\r\n    builder.addCase(fetchContacts.fulfilled, (state, action) => {\r\n      state.contacts = action.payload\r\n    })\r\n    builder.addCase(fetchContacts.rejected, (state, action) => {\r\n      state.contacts = []\r\n      // todo: error\r\n    })\r\n  }\r\n});\r\n\r\nexport const { create } = contactsSlice.actions;\r\n\r\nexport default contactsSlice.reducer;\r\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { \n  List, ListItem, ListItemText \n} from '@material-ui/core';\n\nimport { selectContacts } from \"./contactsSlice\"\n\n// import {\n//   decrement,\n//   increment,\n//   incrementByAmount,\n//   incrementAsync,\n//   selectCount,\n// } from './counterSlice';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}))\n\nfunction ContaxList() {\n  const classes = useStyles()\n\n  const contacts = useSelector(selectContacts)\n  console.log(contacts)\n\n  return contacts && contacts.length ? (\n    <List className={classes.root} subheader={<li />}>\n      {contacts.map((contact) => (\n        <ListItem key={`contact-${contact.id}`}>\n          <ListItemText primary={`${contact.first_name} ${contact.last_name}`} />\n        </ListItem>\n      ))}\n    </List>\n  ) : null\n}\n\nexport default ContaxList;","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { AppBar, Toolbar, IconButton, Typography, Button} from '@material-ui/core';\nimport { Menu as MenuIcon, AddCircle as AddCircleIcon } from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme) => ({\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction Header() {\n  const classes = useStyles()\n\n  return (\n    <AppBar position=\"static\">\n    <Toolbar>\n      <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n      <Typography variant=\"h6\" className={classes.title}>\n        Contax\n      </Typography>\n      <Button color=\"inherit\"><AddCircleIcon /></Button>\n    </Toolbar>\n  </AppBar>\n  )\n}\n\nexport default Header;","import React, {useEffect} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// import { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport ContaxList from './features/contax/ContaxList';\r\nimport {\r\n  fetchContacts,\r\n} from './features/contax/contactsSlice';\r\nimport Header from './features/contax/Header';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(fetchContacts())    \r\n    // Your code here\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <ContaxList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport contactsReducer from '../features/contax/contactsSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}